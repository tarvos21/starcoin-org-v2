<!doctype html><html lang=zh><head><meta charset=utf-8><meta content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no" name=viewport><meta id=i18n_pagename content="index-common"><link rel=icon type=image/svg href=/img/stc.svg><link rel=stylesheet type=text/css href=/css/bootstrap.css><link rel=stylesheet href=/css/swiper-bundle.css><link rel=stylesheet type=text/css href=/css/nav.css><link rel=stylesheet type=text/css href=/css/nav_developer.css><link rel=stylesheet type=text/css href=/css/banner.css><link rel=stylesheet type=text/css href=/css/font_zh.css><link rel=stylesheet type=text/css href=/css/footer.css><link rel=stylesheet type=text/css href=/css/developer.css><link rel=stylesheet type=text/css href=/css/markdown.css><script src=/js/jquery.min.js></script><script src=/js/bootstrap.min.js></script><script src=/js/swiper-bundle.min.js></script><script>(function(c,d){const b=196;function a(){const a=document.documentElement.clientWidth/1920,c=b*Math.min(a,2);document.documentElement.style.fontSize=c+'px'}a(),addEventListener('resize',a,!1)})(document,window)</script><script>$(document).ready(function(){a(),$(window).resize(function(){a()});function a(){window.innerWidth<=768?($(".m-d-title").css("width",document.body.clientWidth-30+'px'),$(".m-d-content").css("width",document.body.clientWidth-30+'px'),$(".developer").css("marginLeft","-221px")):($(".m-d-title").css("width","auto"),$(".m-d-content").css("width","auto"),$(".developer").css("marginLeft","auto"))}$("#developer_open_move").click(function(){$(this).parent().attr("class").indexOf("active")>-1?($(this).find(".icon img").attr("src","/img/icon_block.png"),$(this).parent().removeClass("active")):($(this).find(".icon img").attr("src","/img/icon_block_active.png"),$(this).parent().addClass("active"))}),$(".m_left_nav_click").click(function(){$(this).attr("state")==0?($(this).attr("state",1),$(".m_mask").show(),$(".m-column-drawer").animate({marginLeft:"100px"})):($(this).attr("state",0),$(".m_mask").hide(),$(".m-column-drawer").animate({marginLeft:"-212px"}))}),$(".m_mask").click(function(){$(this).hide(),$(".m_left_nav_click").attr("state",0),$(".m-column-drawer").animate({marginLeft:"-212px"})})})</script><title>Move 1.2 更新 | Starcoin</title></head><body><div class=hidden-xs><div class=header_top></div><div class="top scrollTop-nav"><div class=container><a href=/zh><div class=logo><img src=/img/logo.png></div></a><div class="nav navClick"><div class="item Overview allSelect"><span class=i18n href=/zh/>首页</span><div class=more_nav><div class=box><div class=li><a class=i18n href=/zh/overview/technology_whitepaper/>技术白皮书</a></div><div class=li><a class=i18n href=/zh/overview/economy_whitepaper/>经济模型白皮书</a></div></div></div></div><div class="item Guide allSelect"><span class=i18n>使用指南</span><div class=more_nav><div class=box><div class=li><a class=i18n href=/zh/developer/tutorials/starcoin_wallet/>Starcoin钱包</a></div><div class=li><a class=i18n onclick="return window.open('https://github.com/starcoinorg/starmask-extension/blob/main/docs/how-to-use.md',''),!1" href=javascript:void(0)>StarMask浏览器钱包</a></div><div class=li><a class=i18n href=/zh/developer/cli/mint/>节点挖矿</a></div><div class=li><a class=i18n href=/zh/developer/cli/>节点命令</a></div></div></div></div><div class="item Developer allSelect"><span class=i18n>开发者</span><div class=more_nav><div class=box><div class=li><span class=i18n>Node</span><div class=second_nav><div class=li><a class=i18n href=/zh/developer/key_concepts/concept>关键概念</a></div><div class=li><a class=i18n href=/zh/developer/rpc/rpc_document/>RPC 协议</a></div><div class=li><a class=i18n href=/zh/developer/sips/>SIPs</a></div><div class=li><a class=i18n href=/zh/developer/sdk/>SDK</a></div></div></div><div class=li><span class=i18n>Move</span><div class=second_nav><div class=li><a class=i18n onclick="return window.open('https://move-book.com/cn/index.html',''),!1" href=javascript:void(0)>Move 开发指南</a></div><div class=li><a class=i18n onclick="return window.open(' https://github.com/starcoinorg/starcoin/blob/master/vm/move-cli/README.md',''),!1" href=javascript:void(0)>Move IDE</a></div><div class=li><a class=i18n onclick="return window.open('https://github.com/starcoinorg/starcoin/blob/master/vm/move-cli/README.zh.md',''),!1" href=javascript:void(0)>Move CLI</a></div><div class=li><a class=i18n href=/zh/developer/move/example>Move 合约示例</a></div></div></div><div class=li><span class=i18n>矿池接入</span><div class=second_nav><div class=li><a class=i18n onclick="return window.open('https://github.com/starcoinorg/starcoin/discussions/2541',''),!1" href=javascript:void(0)>矿池接入</a></div><div class=li><a class=i18n onclick="return window.open('https://github.com/starcoinorg/starcoin/blob/b47429fc792fe9fabd1587fa60a9cae249f0b67f/stratum/stratum_mining_protocol.md',''),!1" href=javascript:void(0)>矿池协议</a></div></div></div><div class=li><a class=i18n href=/zh/developer/>更多</a></div></div></div></div><div class="item Community allSelect"><span class=i18n>社区</span><div class=more_nav><div class=box><div class=li><a class=i18n href=/zh/news/>新闻</a></div><div class=li><a class=i18n onclick="return window.open('http://westar.io',''),!1" href=javascript:void(0)>Westar 实验室</a></div><div class=li><a class=i18n onclick="return window.open('https://www.movelang.io',''),!1" href=javascript:void(0)>Move 中文社区</a></div></div></div></div><div class="item About allSelect"><a class=i18n href=/zh/about><span class=i18n>关于</span></a></div></div><div class="language p-language"><span language=en>English</span>｜<span language=zh>中文</span></div></div></div></div><div class=visible-xs style=display:block><div class="header_top m_header_top"></div><div class="top m_top scrollTop-nav"><div class="container m_container"><a href=/><div class=m_logo><img src=/img/logo.png></div></a><div class="m_nav m_nav_tap"><img src=/img/m_nav_more.png></div></div></div><div class=m_nav_model><div class="nav navClick m_nav_navigation"><div class="item Overview allSelect"><span class=i18n href=/zh/>首页</span><div class=more_nav><div class=box><div class=li><a class=i18n href=/zh/overview/technology_whitepaper/>技术白皮书</a></div><div class=li><a class=i18n href=/zh/overview/economy_whitepaper/>经济模型白皮书</a></div></div></div></div><div class="item Guide allSelect"><span class=i18n>使用指南</span><div class=more_nav><div class=box><div class=li><a class=i18n href=/zh/developer/tutorials/starcoin_wallet/>Starcoin钱包</a></div><div class=li><a class=i18n onclick="return window.open('https://github.com/starcoinorg/starmask-extension/blob/main/docs/how-to-use.md',''),!1" href=javascript:void(0)>StarMask浏览器钱包</a></div><div class=li><a class=i18n href=/zh/developer/cli/mint/>节点挖矿</a></div><div class=li><a class=i18n href=/zh/developer/cli/>节点命令</a></div></div></div></div><div class="item Developer allSelect"><span class=i18n>开发者</span><div class=more_nav><div class=box><div class=li><span class=i18n>Node</span><div class=second_nav><div class=li><a class=i18n href=/zh/developer/key_concepts/concept>关键概念</a></div><div class=li><a class=i18n href=/zh/developer/rpc/rpc_document/>RPC 协议</a></div><div class=li><a class=i18n href=/zh/developer/sips/>SIPs</a></div><div class=li><a class=i18n href=/zh/developer/sdk/>SDK</a></div></div></div><div class=li><span class=i18n>Move</span><div class=second_nav><div class=li><a class=i18n onclick="return window.open('https://move-book.com/cn/index.html',''),!1" href=javascript:void(0)>Move 开发指南</a></div><div class=li><a class=i18n onclick="return window.open(' https://github.com/starcoinorg/starcoin/blob/master/vm/move-cli/README.md',''),!1" href=javascript:void(0)>Move IDE</a></div><div class=li><a class=i18n onclick="return window.open('https://github.com/starcoinorg/starcoin/blob/master/vm/move-cli/README.zh.md',''),!1" href=javascript:void(0)>Move CLI</a></div><div class=li><a class=i18n href=/zh/developer/move/example>Move 合约示例</a></div></div></div><div class=li><span class=i18n>矿池接入</span><div class=second_nav><div class=li><a class=i18n onclick="return window.open('https://github.com/starcoinorg/starcoin/discussions/2541',''),!1" href=javascript:void(0)>矿池接入</a></div><div class=li><a class=i18n onclick="return window.open('https://github.com/starcoinorg/starcoin/blob/b47429fc792fe9fabd1587fa60a9cae249f0b67f/stratum/stratum_mining_protocol.md',''),!1" href=javascript:void(0)>矿池协议</a></div></div></div><div class=li><a class=i18n href=/zh/developer/>更多</a></div></div></div></div><div class="item Community allSelect"><span class=i18n>社区</span><div class=more_nav><div class=box><div class=li><a class=i18n href=/zh/news/>新闻</a></div><div class=li><a class=i18n onclick="return window.open('http://westar.io',''),!1" href=javascript:void(0)>Westar 实验室</a></div><div class=li><a class=i18n onclick="return window.open('https://www.movelang.io',''),!1" href=javascript:void(0)>Move 中文社区</a></div></div></div></div><div class="item About allSelect"><a class=i18n href=/zh/about><span class=i18n>关于</span></a></div></div><div class=m-language><div language=zh class=item>中文<div class=line></div></div><div language=en class=item>English</div></div></div><div class=clearfix></div></div><script>$(document).ready(function(){const a=JSON.parse(localStorage.getItem('navActive'))||0;$(".navClick .item")[a].classList.add('navActive'),$(".p-language span, .m-language .item").click(function(){let a=window.location.href,b=$(this).attr('language'),c="zh";c!==b&&(a=a.replace(`/${c}/`,`/${b}/`),window.location.href=a)}),$(".navClick .item").click(function(){let b=$(this)[0]||null;if(b){b.classList.add('navActive');let e=[],d=b.parentNode.children;for(var a=0,c=d.length;a<c;a++)d[a]!==b?e.push(d[a]):localStorage.setItem('navActive',a);e.forEach(a=>{a.classList.remove('navActive')})}$(this).attr("href")&&window.open($(this).attr("href"),"_self")}),$(".more_nav .box .li").click(function(){$(this).attr("href")&&window.open($(this).attr("href"),"_self")}),$(".m_nav_navigation").find(".allSelect").click(function(){$(this).attr("class").indexOf("m_tab_select")>-1?(console.log($(this)),$(this).removeClass("m_tab_select")):$(this).addClass("m_tab_select")}),$(".m_nav_tap").click(function(){$(this).find("img").attr("src")=="/img/m_nav_more.png"?($(this).find("img").attr("src","/img/m_nav_close.png"),$(".m_nav_model").show(),$(".m_nav_model").animate({height:"100%"}),$(".scrollTop-nav").addClass("home-nav")):($(this).find("img").attr("src","/img/m_nav_more.png"),$(".scrollTop-nav").removeClass("home-nav"),$(".m_nav_model").animate({height:"0%"}),$(".m_nav_model").hide())})})</script><div class=container><div class="developer m-column-drawer"><div class=developer_left><div class=developer_column>Starcoin</div><div class=developer_column_list><div class=developer_search><div class=search><div class=icon><img src=/img/search.png></div><input type=text placeholder=搜索 name=fname></div></div><ul><li><a href=/zh/developer/setup/>从这里开始</a><ul><li><a href=/zh/developer/setup/install/>安装</a></li><li><a href=/zh/developer/setup/build/>从源码构建</a></li><li><a href=/zh/developer/setup/run_by_docker/>通过 docker 运行</a></li><li><a href=/zh/developer/setup/runnetwork/>运行/加入网络</a></li><li><a href=/zh/developer/setup/runcustomnetwork/>运行自定义的区块链网络</a></li></ul></li><li><a href=/zh/developer/cli/ class=arrow>命令行工具</a></li><li><a href=/zh/developer/tutorials/ class=arrow>教程</a></li><li><a href=/zh/developer/move/ class=arrow>Move 语言</a><ul><li><a href=/zh/developer/move/1.2/changelog/ class=active>Move 1.2 更新</a></li><li><a href=/zh/developer/move/example/>Move 示例</a></li></ul></li><li><a href=/zh/developer/key_concepts/ class=arrow>关键概念</a></li><li><a href=/zh/developer/rpc/ class=arrow>RPC</a></li><li><a href=/zh/developer/release-notes/ class=arrow>版本记录</a></li><li><a href=/zh/developer/sdk/>SDK</a><ul></ul></li><li><a href=/zh/developer/tech/ class=arrow>技术</a></li><li><a href=/zh/developer/sips/ class=arrow>SIPs</a></li></ul></div></div><div class=developer_right><div class=m_mask></div><div class="column_title m-d-title"><img class=m_left_nav_click state=0 src=/img/m_nav_more.png>
<span>Move 1.2 更新</span></div><div class="content m-d-content"><article class=markdown><p><br></p><h1 id=abilities>Abilities</h1><ul><li>状态：Move 1.2已实现</li></ul><h3 id=介绍>介绍</h3><p>Abilities是Move 1.2中支持的新的特性，可以更好地控制给定类型的值所允许的操作。在Move以前的类型系统中，有copyable的值和 <code>resource</code> 的值。在旧的系统中，copyable的值是不受约束的，但是resource的值不能被拷贝并且必须被使用掉。使用ability，Move的类型系统有更细粒度的控制能力，允许类型对它的值专门进行某些操作，这些操作以前会根据“分类”(copyable还是resource)隐式允许或者不允许。</p><h3 id=动机>动机</h3><p>Move的分类系统是强大的，但是对某些场景来说，没有足够的表达能力。Resource类型非常强大，但是系统捆绑了多种行为到这一个分类上，这些行为并不是所有场景都需要。在Diem框架中，需要表达一种像“烫手的山芋”一样的类型——它不能被拷贝或者丢弃(像一个resource)，但是也不能保存到全局存储中。那么它就像一个“烫手的山芋”，因为你必须一直传递它，并且必须在交易完成之前消耗掉它。具有这些约束的类型，必须允许通过move prover来验证这些特殊的能力。</p><p>扩展分类系统可以处理“烫手的山芋”这个例子，但不是最好的面向未来的解决方案。一个更细粒度的系统可以给程序员更多的控制权，不仅可以实现“烫手的山芋”这样的类型，还可以满足未知的需求。例如，我们希望新系统足够灵活，以便在未来进行扩展，而无需对类型系统进行另一次大规模重构。</p><h3 id=描述>描述</h3><p>copyable和resource分类被4种新的ability替代。这些ability可以通过多种字节码指令获得。为了让某个值有相应的ability(如果只需要一种ability——并不需要把所有的ability都加上)，只需要使用对应的字节码指令。</p><h3 id=ability>ability</h3><p>这4个添加的ability分别是<code>copy</code>, <code>drop</code>, <code>store</code>, 和 <code>key</code>。下面是详细介绍：</p><ul><li><code>copy</code><ul><li>允许这个类型的值可以被拷贝</li><li>入口： <code>CopyLoc</code> 和 <code>ReadRef</code></li><li>如果一个值可以拷贝，那么它内部所有值都能被拷贝</li></ul></li><li><code>drop</code><ul><li>允许这个类型的值被弹出或者丢弃<ul><li>所有权不能被转移</li></ul></li><li>入口：<code>Pop</code>, <code>WriteRef</code>, <code>StLoc</code>, <code>Eq</code> 和 <code>Neq</code></li><li>当函数返回<code>Ret</code>时，保留在局部变量中的值必须能<code>drop</code></li><li>如果一个值可以<code>drop</code>，那么它内部所有值都能被<code>drop</code></li></ul></li><li><code>store</code><ul><li>允许这个类型的值保存在全局存储的结构体中<ul><li>但不一定是全局存储中的顶级值</li></ul></li><li>这是目前唯一不能被直接检查的ability，但是可以通过<code>key</code>间接检查</li><li>如果一个值可以<code>store</code>，那么它内部所有值都能被<code>store</code></li></ul></li><li><code>key</code><ul><li>允许这个类型作为全局存储的键操作<ul><li>让这个类型的值在全局存储的顶级</li></ul></li><li>入口： <code>MoveTo</code>, <code>MoveFrom</code>, <code>BorrowGlobal</code>, <code>BorrowGlobalMut</code>, 和 <code>Exists</code></li><li>如果一个值可以<code>key</code>，那么它内部所有值都能被<code>store</code></li></ul></li></ul><h3 id=原始类型>原始类型</h3><p>除了<code>signer</code>之外，其他的所有原始类型都有 <code>copy</code>, <code>drop</code>, 和 <code>store</code>。</p><ul><li><code>bool</code>, <code>u8</code>, <code>u64</code>, <code>u128</code>, 和 <code>address</code> 都有 <code>copy</code>, <code>drop</code>, and <code>store</code>。</li><li><code>signer</code>有<code>drop</code>。<ul><li>不能拷贝，并且不能保存到全局存储中。</li></ul></li><li><code>vector&lt;T></code>有没有<code>copy</code>, <code>drop</code>, 和<code>store</code>依赖于<code>T</code>的ability。<ul><li>查看更多<a href=#%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%9D%A1%E4%BB%B6ability>泛型类型的条件ability</a></li></ul></li><li>不可变引用 <code>&</code> 和可变引用 <code>&mut</code> 都有 <code>copy</code> 和 <code>drop</code>。<ul><li>这是指复制和删除引用本身，而不是它们所引用的内容。</li><li>引用不能保存到全局存储中，因此它们没有 <code>store</code>。</li></ul></li></ul><h3 id=声明结构体的ability>声明结构体的ability</h3><p>给 <code>struct</code> 添加ability，在结构体名称后面，但是在字段的前面，使用 <code>has</code> 声明。例如:</p><pre><code class=language-move data-lang=move>struct Ignorable has drop { f: u64 }
struct Pair has copy, drop, store { x: u64, y: u64 }
</code></pre><p>这样 <code>Ignorable</code> 有 <code>drop</code> 的ability， <code>Pair</code> 有 <code>copy</code>, <code>drop</code>, 和 <code>store</code>。</p><p>声明一个结构体的ability，对字段有一定的要求。所有字段都必须满足这些约束。这些规则是必要的，这样结构体才能满足上面的这些ability。如果一个结构体声明了ability&mldr;</p><ul><li><code>copy</code>, 所有字段必须能 <code>copy</code></li><li><code>drop</code>, 所有字段必须能 <code>drop</code></li><li><code>store</code>, 所有字段必须能 <code>store</code></li><li><code>key</code>, 所有字段必须能<code>store</code><ul><li><code>key</code> 是目前唯一不需要自身的ability</li></ul></li></ul><p>举个栗子：</p><pre><code class=language-move data-lang=move>// A struct without any abilities
struct NoAbilities {}

struct WantsCopy has copy {
    f: NoAbilities, // ERROR 'NoAbilities' does not have 'copy'
}
</code></pre><p>相似地：</p><pre><code class=language-move data-lang=move>// A struct without any abilities
struct NoAbilities {}

struct MyResource has key {
    f: NoAbilities, // Error 'NoAbilities' does not have 'store'
}
</code></pre><h3 id=基本例子>基本例子</h3><p>Copy</p><pre><code class=language-move data-lang=move>struct NoAbilities {}
struct S has copy, drop { f: bool }

fun example(x: u64, s: S) {
    let x2 = copy x; // Valid, 'u64' has 'copy'
    let s2 = copy s; // Valid, 'S' has 'copy'
}

fun invalid(account: signer, n: NoAbilities) {
    let a2 = copy account; // Invalid, 'signer' does not have 'copy'
    let n2 = copy n; // Invalid, 'NoAbilities' does not have 'drop'
}
</code></pre><p>Drop</p><pre><code class=language-move data-lang=move>struct NoAbilities {}
struct S has copy, drop { f: bool }

fun unused() {
    true; // Valid, 'bool' has 'drop'
    S { f: false }; // Valid, 'S' has 'drop'
}

fun left_in_local(account: signer): u64 {
    let b = true;
    let s = S { f: false };
    // Valid return: 'account', 'b', and 's' have values
    // but 'signer', 'bool', and 'S' have 'drop'
    0
}

fun invalid_unused() {
    NoAbilities {}; // Invalid, Cannot ignore 'NoAbilities' without 'drop'
}

fun invalid_left_in_local(): u64 {
    let n = NoAbilities{};
    // Invalid return: 'n' has a value and 'NoAbilities' does not have 'drop'
    0

}
</code></pre><p>Store</p><pre><code class=language-move data-lang=move>// 'MyInnerResource' is declared with 'store' so all fields need 'store'
struct MyInnerResource has store {
    yes: u64, // Valid, 'u64' has 'store'
    // no: signer, Invalid, 'signer' does not have 'store'
}

// 'MyResource' is declared with 'key' so all fields need 'store'
struct MyResource has key {
    yes: u64, // Valid, 'u64' has 'store'
    inner: MyInnerResource, // Valid, 'MyInnerResource' has 'store'
    // no: signer, Invalid, 'signer' does not have 'store'
}
</code></pre><p>Key</p><pre><code class=language-move data-lang=move>struct NoAbilities {}
struct MyResource has key { f: u64 }

fun valid(account: &amp;signer) acquires MyResource {
    let addr = Signer::address_of(account);
    let has_resource = exists&lt;MyResource&gt;(addr); // Valid, 'MyResource' has 'key'
    if (!has_resource) {
        move_to(account, MyResource { f: 0 }) // Valid, 'MyResource' has 'key'
    };
    let r = borrow_global_mut&lt;MyResource&gt;(addr) // Valid, 'MyResource' has 'key'
    r.f = r.f + 1;
}

fun invalid(account: &amp;signer) {
   let has_it = exists&lt;NoAbilities&gt;(addr); // Invalid, 'NoAbilities' does not have 'key'
   let NoAbilities {} = move_from&lt;NoAbilities&gt;(addr); // Invalid, does not have 'key'
   move_to(account, NoAbilities {}); // Invalid, 'NoAbilities' does not have 'key'
   borrow_global&lt;NoAbilities&gt;(addr); // Invalid, 'NoAbilities' does not have 'key'
}
</code></pre><h3 id=泛型约束>泛型约束</h3><p>ability也可用于约束泛型，只有具有相应ability的类型，才能实例化对应ability的泛型参数。这可以用于函数和结构体类型参数：</p><pre><code class=language-move data-lang=move>fun foo&lt;T: copy&gt;(x: T): (T, T) { (copy x, x) }
struct CopyCup&lt;T: copy&gt; has copy { item: T }
</code></pre><p>类型参数可以用 <code>+</code> 表示多个约束</p><pre><code class=language-move data-lang=move>fun bar&lt;T: copy + drop&gt;(x: T): T { copy x }
struct AllCup&lt;T: copy + drop + store + key&gt; has copy, drop, store, key { item: T }
</code></pre><h2 id=泛型类型的条件ability>泛型类型的条件ability</h2><p>在泛型类型上声明ability时，并非该类型的所有实例都保证具有该ability。例如这个结构体声明：</p><pre><code class=language-move data-lang=move>struct Cup&lt;T&gt; has copy, drop, store, key { item: T }
</code></pre><p>假定类型参数 <code>T</code> 在结构体内部使用，因此仅当 <code>T</code> 满足上述这些要求时结构体才有这些ability。这意味着</p><ul><li><code>Cup</code> 只有在 <code>T</code> 有 <code>copy</code> 时才能 <code>copy</code></li><li>只有在 <code>T</code> 有 <code>drop</code> 时才能 <code>drop</code></li><li>只有在 <code>T</code> 有 <code>store</code> 时才能 <code>store</code></li><li>只有在 <code>T</code> 有 <code>store</code>时才能 <code>key</code></li></ul><p>这种做法可能让人有点困惑，但对于类似集合类型非常有用。例如 <code>vector</code>：我们可以认为它具有以下类型声明：</p><pre><code class=language-move data-lang=move>vector&lt;T&gt; has copy, drop, store;
</code></pre><p>这样，只有内部的元素能被拷贝，才能拷贝 <code>vector</code> 的值。只有内部的元素能被忽略或者丢弃，才能忽略 <code>vector</code> 的值。并且只有内部的元素能被保存在全局存储中， <code>vector</code> 才能保存到全局存储中。</p><h3 id=更多例子>更多例子</h3><p>Copy</p><pre><code class=language-move data-lang=move>struct NoAbilities {}
struct S has copy, drop { f: bool }
struct Cup&lt;T&gt; has copy, drop, store { item: T }

fun example(c_x: Cup&lt;u64&gt;, c_s: Cup&lt;S&gt;) {
    // Valid, 'Cup&lt;u64&gt;' has 'copy' because 'u64' has 'copy'
    let c_x2 = copy c_x;
    // Valid, 'Cup&lt;S&gt;' has 'drop' because 'S' has 'drop'
    let c_s2 = copy c_s;
}

fun invalid(c_account: Cup&lt;signer&gt;, c_n: Cup&lt;NoAbilities&gt;) {
    // Invalid, 'Cup&lt;signer&gt;' does not have 'copy'.
    // Even though 'Cup' was declared with copy, the instance does not have 'copy'
    // because 'signer' does not have 'copy'
    let c_account2 = copy c_account;
    // Invalid, 'Cup&lt;NoAbilities&gt;' does not have 'drop'
    // because 'NoAbilities' does not have 'drop'
    let c_n2 = copy c_n;
}
</code></pre><p>Drop</p><pre><code class=language-move data-lang=move>struct NoAbilities {}
struct S has copy, drop { f: bool }
struct Cup&lt;T&gt; has copy, drop, store { item: T }

fun unused() {
    Cup&lt;bool&gt; { item: true }; // Valid, 'Cup&lt;bool&gt;' has 'drop'
    Cup&lt;S&gt; { item: S { f: false }}; // Valid, 'Cup&lt;S&gt;' has 'drop'
}

fun left_in_local(c_account: Cup&lt;signer&gt;): u64 {
    let c_b = Cup&lt;bool&gt; { item: true };
    let c_s = Cup&lt;S&gt; { item: S { f: false }};
    // Valid return: 'c_account', 'c_b', and 'c_s' have values
    // but 'Cup&lt;signer&gt;', 'Cup&lt;bool&gt;', and 'Cup&lt;S&gt;' have 'drop'
    0
}

fun invalid_unused() {
    // Invalid, Cannot ignore 'Cup&lt;NoAbilities&gt;' because it does not have 'drop'.
    // Even though 'Cup' was declared with 'drop', the instance does not have 'drop'
    // because 'NoAbilities' does not have 'drop'
    Cup&lt;NoAbilities&gt; { item: NoAbilities {}};
}

fun invalid_left_in_local(): u64 {
    let n = Cup&lt;NoAbilities&gt; { item: NoAbilities {}};
    // Invalid return: 'c_n' has a value
    // and 'Cup&lt;NoAbilities&gt;' does not have 'drop'
    0

}
</code></pre><p>Store</p><pre><code class=language-move data-lang=move>struct Cup&lt;T&gt; has copy, drop, store { item: T }

// 'MyInnerResource' is declared with 'store' so all fields need 'store'
struct MyInnerResource has store {
    yes: Cup&lt;u64&gt;, // Valid, 'Cup&lt;u64&gt;' has 'store'
    // no: Cup&lt;signer&gt;, Invalid, 'Cup&lt;signer&gt;' does not have 'store'
}

// 'MyResource' is declared with 'key' so all fields need 'store'
struct MyResource has key {
    yes: Cup&lt;u64&gt;, // Valid, 'Cup&lt;u64&gt;' has 'store'
    inner: Cup&lt;MyInnerResource&gt;, // Valid, 'Cup&lt;MyInnerResource&gt;' has 'store'
    // no: Cup&lt;signer&gt;, Invalid, 'Cup&lt;signer&gt;' does not have 'store'
}
</code></pre><p>Key</p><pre><code class=language-move data-lang=move>struct NoAbilities {}
struct MyResource&lt;T&gt; has key { f: T }

fun valid(account: &amp;signer) acquires MyResource {
    let addr = Signer::address_of(account);
     // Valid, 'MyResource&lt;u64&gt;' has 'key'
    let has_resource = exists&lt;MyResource&lt;u64&gt;&gt;(addr);
    if (!has_resource) {
         // Valid, 'MyResource&lt;u64&gt;' has 'key'
        move_to(account, MyResource&lt;u64&gt; { f: 0 })
    };
    // Valid, 'MyResource&lt;u64&gt;' has 'key'
    let r = borrow_global_mut&lt;MyResource&lt;u64&gt;&gt;(addr)
    r.f = r.f + 1;
}

fun invalid(account: &amp;signer) {
   // Invalid, 'MyResource&lt;NoAbilities&gt;' does not have 'key'
   let has_it = exists&lt;MyResource&lt;NoAbilities&gt;&gt;(addr);
   // Invalid, 'MyResource&lt;NoAbilities&gt;' does not have 'key'
   let NoAbilities {} = move_from&lt;NoAbilities&gt;(addr);
   // Invalid, 'MyResource&lt;NoAbilities&gt;' does not have 'key'
   move_to(account, NoAbilities {});
   // Invalid, 'MyResource&lt;NoAbilities&gt;' does not have 'key'
   borrow_global&lt;NoAbilities&gt;(addr);
}
</code></pre><h3 id=向后兼容>向后兼容</h3><p>新的ability系统能够兼容旧的分类系统的几乎所有场景。在字节码层面，旧分类的模块和脚本可以像ability编写出来的一样被加载。</p><p>对于任何结构体来说：</p><ul><li>如果声明为可拷贝的，非<code>resource</code>结构体，那么该结构体将可以<code>copy</code>, <code>drop</code>, 和 <code>store</code></li><li>如果声明为<code>resource</code>，该结构体将可以<code>store</code> 和 <code>key</code></li><li>对于类型参数：<ul><li><code>copyable</code> 变成 <code>copy + drop</code></li><li><code>resource</code> 变成 <code>key</code></li><li><code>store</code> 没有，因为类型参数不需要关心这个限制。任何惯例将仍然可用。</li></ul></li></ul><p>对于任何函数来说：</p><ul><li>对于类型参数：<ul><li><code>copyable</code> 变成 <code>copy + drop + store</code></li><li><code>resource</code> 变成 <code>key + drop</code></li><li><code>store</code> 是需要的，因为需要确定类型参数是否可以操作全局存储</li></ul></li></ul><p>将所有的这些规则总结起来，旧代码</p><pre><code class=language-move data-lang=move>struct S&lt;T: copyable&gt; {}
resource struct R&lt;T1: resource, T2&gt; {}

fun foo&lt;Tc: copyable, Tr: resource, T&gt;() {}
</code></pre><p>将像下面这样被加载：</p><pre><code class=language-move data-lang=move>struct S&lt;T: copy + drop&gt; has copy, drop, store {}
struct R&lt;T1: key, T2&gt; {}

fun foo&lt;Tc: copy + drop + store, Tr: key + store, T: store&gt;() {}
</code></pre><p>这导致了一个重大变化，即任何使用<code>signer</code>作为类型参数实例化的函数现在都不会加载，因为类型参数将具有<code>store</code>约束——所有旧的函数类型参数都被赋予<code>store</code>约束——但<code>signer</code>会没有<code>store</code>。鉴于<code>signer</code>的使用受限，这可能是一个极端情况，我们认为这不是问题。</p><h2 id=其他考虑>其他考虑</h2><h3 id=扩展分类系统>扩展分类系统</h3><p>作为这个更改的主要动机的例子，考虑向系统添加“烫手的山芋”的分类。在分类系统中有：</p><ul><li><code>Copyable</code> 相当于 <code>copy + drop + store</code></li><li><code>Resource</code> 相当于 <code>key + store</code></li><li><code>All</code> 有时候相当于 <code>store</code> ，有时候相当于没有任何ability</li></ul><p>可以看成<code>Copyable &lt;: All</code> 和 <code>Resource &lt;: All</code>这样的子分类系统。添加一种<code>HotPotato</code>分类比较难，可能的层次结构是<code>Copyable &lt;: All</code> 和 <code>Resource &lt;: HotPotato &lt;: All</code>。但是，这样会混乱：</p><ul><li>添加一种<code>AllWithStore</code>分类，层次结构<code>Copyable &lt;: AllWithStore &lt;: All</code> 和 <code>Resource &lt;: AllWithStore &lt;: All</code> 和 <code>Resource &lt;: HotPotato &lt;: All</code></li><li>如果增加任何其他的类型，复杂性可能会迅速爆炸</li></ul><p>这种子分类方案的复杂性导致了上面描述的更细粒度的方案。我们非常担心在一两年内需要另一种类型，然后整个事情就会崩溃。有了ability，如果需要，我们随时可以非常轻松地添加新的ability。</p><h3 id=显式条件ability>显式条件ability</h3><p>当前围绕泛型以泛型类型为条件的规则可能会令人困惑，特别是考虑到关键字 <code>has</code> 。例如：</p><pre><code class=language-move data-lang=move>struct Cup&lt;T&gt; has copy, drop, store { item: T }
</code></pre><p>尽管明确地说“可以拷贝”、“可以丢弃”和“可以存储”，<code>Cup&lt;T></code> 也不一定有对应的ability，取决于 <code>T</code> 是什么。这可能比较混乱。你可能会希望这样写泛型类型：</p><pre><code class=language-move data-lang=move>struct Cup&lt;T&gt; has ?copy, ?drop, ?store { item: T }
</code></pre><p>这将意味着我们现在有明确的定义，它有没有ability取决于<code>T</code>，然后使用<code>has</code>不使用<code>?</code>标记</p><pre><code class=language-move data-lang=move>struct Ex&lt;T&gt; has copy {}
</code></pre><p>将相当于</p><pre><code class=language-move data-lang=move>struct Ex&lt;T: copy&gt; has ?copy {}
</code></pre><p>那么潜在的问题就在于，有很多没有意义的组合。因此，在很多情况下，编译器会提示只有一种有效组合。</p><ul><li><code>struct Ex&lt;T: copy> has copy</code> 是多余的，跟 <code>struct Ex&lt;T> has copy</code>一样</li><li>对一个非泛型的类型，<code>struct Ex has ?copy</code> 没有意义，等于所有实例都有ability，跟<code>struct Ex has copy</code>一样</li></ul><p>简而言之，使用<code>?</code>标记导致很多混乱。而且，系统并没有增加更多的表达能力，程序员可能会这么声明泛型<code>struct Cup&lt;T: copy> has copy</code>，这将强制每个实例以更明确的方式进行复制。简而言之，单一选项和单一规则，在读取方式上可能会有点混乱，但减少了在声明结构体时的复杂性。</p><h3 id=其他名称>其他名称</h3><p>ability系统从各个方面考虑了不同的名称：</p><ul><li>除了“ability”，“traits”, “type classes”, and “interfaces” 都考虑过。但是这些在其他编程语言中使用的名称，通常用于描述程序员自定义的东西。程序员不能自定义ability。另外，ability不会提供类似动态调度的东西。因此，虽然这些名称可能更熟悉，但我们担心会引起误解。</li><li>也考虑过<code>copyable</code>和<code>dropable</code>和<code>storable</code>，但是感觉太啰嗦，简洁的名字更合适。</li><li>也考虑过<code>mustuse</code>或者 <code>mustmove</code> 替代 <code>drop</code>，即使它们的信息量更大，但是更简洁的名称感觉更好。</li><li>考虑过<code>resource</code> 替代<code>key</code>。<code>key</code>在很多情况下像<code>resource</code> ，但是在有些情况下感觉很古怪，比如<code>Coin</code>，在旧系统中可能是<code>resource struct Coin</code>，在新系统中可能是<code>struct Coin has store</code>并且不是“resource”，因此，我们将“resource”预留，以便在没有<code>copy</code> 或者 <code>drop</code>的时候用。</li></ul><h1 id=friend可见性>Friend可见性</h1><ul><li>状态: Move 1.2已实现</li></ul><h2 id=说明>说明</h2><p>Friend可见性是Move 1.2的新特性，用于更好的控制函数的调用。原来函数只有public和private两种可见性，public的函数可以被任意调用，但是private的函数只能在被定义的模块中使用。Friend可见性函数只能被明确允许的模块调用。</p><h2 id=动机-1>动机</h2><h3 id=宽松的函数可见性模型>宽松的函数可见性模型</h3><p>简单的public/private可见性方案，实现“受限访问”函数需要使用public可见性，如下：</p><ul><li>函数通过已知的特定模块列表（例如，许可名单）进行有限访问</li><li>特定的许可名单之外的其他模块不能访问</li></ul><p>用Diem框架中的<code>initialize</code>函数来举例。理论上，<code>initialize</code>函数应该只能被<code>Genesis</code>模块使用，并且不能暴露给其他模块或者脚本。然而，由于当前可见性模型的限制，这些<code>initialize</code>函数必须是<code>public</code>(为了<code>Genesis</code>能够调用它们)并且执行期检查和静态校验都强制要求，如果不是从创世状态调用这些函数将被终止。</p><h3 id=未来模块更新不灵活>未来模块更新不灵活</h3><p>Public函数有非常受限的更新规则：public函数不能删除或者改名，并且它的函数签名也不能修改。这种限制背后的基本原理是，public函数是面向整个世界的智能合约，一旦合约确定，API不能被轻易修改，一旦修改了API可能导致调用public函数的代码坏掉。public函数的拥有者不能控制谁能调用这个函数。实际上，了解所有调用的地方需要对存储中发布的所有代码进行全局扫描，对于一个开放模型的区块链网络，这不太可能，也不好扩展。</p><p>相比之下，friend函数是一个只能友元模块调用的合约，此外，模块的所有者控制着关系列表。这就是说，模块所有者完全知道哪些模块可能访问这个friend函数。因此，friend函数升级更容易，因为只有在朋友列表中的模块需要关心它的变动。当friend函数及其所有友元模块由同一所有者维护时尤其如此。</p><h3 id=简化规范和验证>简化规范和验证</h3><p>Friend可见性能帮助简化Move prover规范的编写和验证。例如，给定一个friend函数，并且它的友元模块列表，我们能简单并且详细的找到所以调用它的地方。有这些信息，作为一个选择，我们能完全跳过friend的规范，将实现内联到它的调用者中。这可能会进一步简化验证技术，并允许证明更强的属性。相比之下，public函数有必要编写完整和准确的规范。</p><h2 id=描述-1>描述</h2><p>Friend可见性扩展了可能的可见性：</p><ul><li>private (没有修饰符)</li><li>public(friend)</li><li>public(script)</li><li>public</li></ul><p>这些可见性分别对应Move字节码文件格式的<code>Private</code>, <code>Friend</code>, <code>Script</code>, 和 <code>Public</code>。Script可见性解决了Diem框架的一个正交问题，更详细的信息查看这个Script可见性更新描述。</p><p>与新的 <code>public(friend)</code>修饰符相比，任何模块都允许有一个友元列表，可以通过<code>friend &lt;address::name></code> 声明零个或者多个宿主模块信任的模块列表。友元列表中的模块允许调用宿主模块中定义的 <code>public(friend)</code> 函数，但是非友元模块进制调用<code>public(friend)</code> 函数。</p><h3 id=new-visibility-modifier新的可见性修饰符>New Visibility Modifier新的可见性修饰符</h3><p><code>public(friend)</code> 是一个新的可见性修饰符，可以用于模块中的任何函数。<code>public(friend)</code> 函数能被相同模块中的任何其他函数调用(假设为模块<code>M</code>)，或者被模块<code>M</code>的友元列表中指定的模块的任何函数调用。</p><p>对比可见性规则，<code>public(friend)</code> 函数和其他模块函数一样遵循相同规则，意味着它们能调用相同模块中的其他函数(除了 <code>public(script)</code> 函数)，创建新的结构体实例，访问全局存储(模块中生命的类型)，等等。</p><h3 id=friend-list-declarations声明友元列表>Friend List Declarations声明友元列表</h3><p>一个模块能通过友元声明将其他模块声明为友元，格式如下</p><ul><li><code>friend &lt;address::name></code> — 使用完全限定模块名称的友元声明</li><li><code>friend &lt;module-name-alias></code> — 使用模块名称别名的友元声明，其中模块别名是通过 use 语句引入的</li></ul><p>一个模块可能有多个友元声明，所有的友元模块组成了一个友元列表，这是字节码文件格式的新部分。为了可读性，友元声明通常应该放在模块定义的前面。注意，Move脚本不能定义友元模块，因为友元函数不存在于脚本中。</p><p>友元声明需要遵循以下规则：</p><ul><li><p>一个模块不能将自己声明为友元</p><ul><li>例如，<code>0x2::M</code>不能声明<code>0x2::M</code>为友元</li></ul></li><li><p>友元模块必须必须在相同账号地址中</p><ul><li>例如，<code>0x2::M</code>不能声明 <code>0x3::N</code> 为友元</li><li>注意：这不是技术要求，而是规定，以后可能会放宽</li></ul></li><li><p>友元不能循环依赖</p><ul><li><p>友元关系不能循环，例如，<code>0x2::A</code>的友元<code>0x2::B</code>,<code>0x2::B</code>的友元 <code>0x2::C</code> ， <code>0x2::C</code> 友元<code>0x2::A</code>是不允许的</p></li><li><p>声明一个友元模块，当前模块添加一个到友元模块的依赖(目的是让友元调用当前模块中的函数)。如果友元模块已经被直接或者间接使用，将出现循环依赖。例如，如果<code>0x2::A</code> 的友元 <code>0x2::B</code>，并且 <code>0x2::A</code> 调用了`0x2::B::foo()，将形成循环依赖。</p></li></ul></li><li><p>友元必须是已发布</p><ul><li>例如，如果<code>0x2::X</code> 不能被加载器解析，<code>0x2::M</code>不能声明<code>0x2::X</code>为友元 。</li></ul></li><li><p>模块的友元列表不能包含重复项</p></li></ul><h2 id=examples例子>Examples例子</h2><p>有<code>public(friend)</code>函数和友元列表的典型模块，如下：</p><pre><code>address 0x2 {
  module A {
    // friend declaration via fully qualified module name
    friend 0x2::B;

    // friend declaration via module alias
    use 0x2::C;
    friend C;

    public(friend) fun foo() {
      // a friend function can call other non-script functions in the same module
      i_am_private();
      i_am_public();
      bar();
    }
    public(friend) fun bar() {}

    fun i_am_private() {
      // other functions in the same module can also call friend functions
      bar();
    }
    public fun i_am_public() {
      // other functions in the same module can also call friend functions
      bar();
    }
  }

  module B {
    use 0x2::A;

    public fun foo() {
      // as a friend of 0x2::A, functions in B can call friend functions in A
      A::foo();
    }

    public fun bar() {
      0x2::A::bar();
    }
  }
}
</code></pre><h2 id=其他考虑-1>其他考虑</h2><h3 id=友元列表的粒度>友元列表的粒度</h3><ul><li>模块到模块(被采用)<ul><li>模块<code>B</code>是模块<code>A</code>的一个友元—模块<code>B</code>中的任何函数能访问模块<code>A</code>的任何friend函数</li><li>模块一直是 Move 语言中的信任边界，正如所证明的那样：<ul><li>现有的可见性模型，针对宿主模块的函数定义了public和private可见性；</li><li>Struct / Resourc类型的设计，只有定义Struct / Resourc的模块可以访问它们的内部</li></ul></li><li>因此，模块很自然地成为访问friend函数的信任边界</li><li>另一个原因是它参考了其他语言中的友元特性的粒度(例如C++)</li></ul></li><li>模块到函数<ul><li>模块<code>B</code>是函数 <code>foo()</code>的友元—任何模块<code>B</code>中的函数能调用<code>foo()</code></li><li>这是一个更细粒度的 Module-to-Module 关系声明版本，也可以在其他语言中找到(例如，C++ 也支持 Module-to-Function 关系)。我们不选择这种方式的原因主要是1)它打破了模块作为 Move 界限的模式，2)可能会导致一个模块（例如模块<code>A</code>）是每个友元函数的友元，需要为每个友元函数重复指定友元<code>A</code>。</li></ul></li><li>函数到模块<ul><li>函数 <code>foo()</code> 是模块<code>A</code>的友元 — 函数<code>foo()</code>能调用模块<code>A</code>中的任何friend函数</li><li>没有选择这个方案的原因是表达起来很奇怪，作为一个开发者，我们相信函数 <code>0x3::B::foo()</code>但是不相信<code>0x3::B::bar()</code>，尤其是当它们在同一个<code>0x3::B</code>模块中。我们没想到这种场景的合理用例。</li></ul></li><li>函数到函数<ul><li>函数<code>foo()</code>是函数<code>bar()</code> 的友元 — 函数<code>foo()</code>能调用友元函数<code>bar()</code></li><li>除了在模块中信任一个函数而不信任另一个函数(类似于Function-to-Module)感觉很奇怪之外，我们认为这种方案过于细粒度，会导致开发不灵活，尤其是在函数名称更新上。例如，假设<code>foo()</code>是模块<code>B</code>中的私有函数，<code>bar()</code>是模块<code>A</code>中的友元函数。这个方案要求当私有函数<code>foo()</code>重命名时，模块<code>A</code>中的一些东西也需要更新！在这个方案下，函数 <code>foo()</code> 不再是模块 <code>B</code> “私有”的了。</li></ul></li></ul><h3 id=location-of-friend-declarations友元声明的位置>Location of Friend Declarations友元声明的位置</h3><ul><li>被调用方声明(被采用)<ul><li>模块开发者在编写源代码时指定该模块的友元。如果后期开发者想要添加/删除友元，他们可以随时更新友元列表并将模块重新发布到链上(要通过可更新性和兼容性检查)。</li><li>这是定义友元列表最自然的方式，因为友元列表与模块源代码嵌入在相同的源文件中。与替代方案 — 调用方声明 — 相比，开发人员更容易通过查看相同文件来确定谁可能调用友元函数以及友元函数应如何调整。</li></ul></li><li>调用方声明<ul><li>另一种想法是让友元函数的调用方“请求”权限，而不是让友元函数的所有者“授予”权限。例如，如果模块 <code>B</code> 想要访问模块<code>A</code>中的一些友元函数，那么模块<code>B</code>的源代码中会声明模块<code>A</code>是友元(而被调用方要求在模块 <code>A</code>的源码中声明)。</li><li>这种替代方案的一个主要缺点是，如果开发人员不积极维护友元关系，则代码所有者没有友元列表。对于友元关系，源码可能存储在链上，要么 1) 通过链上模块字节码更新VM，或 2) 用户帐户中的新 <code>FriendList</code>。更重要的是，通过查看模块的源代码，开发人员不知道谁可以调用友元函数以及如何调用的。</li></ul></li></ul><h3 id=publishing-order>Publishing Order</h3><p>跨模块引用使发布这些模块的过程复杂化。这个问题可以看下面的说明：</p><pre><code>address 0x2 {
  module M {
    friend 0x2::N;
    public(friend) fun foo() {}
  }
  module N {
    use 0x2::M;
    fun bar() { M::foo(); }
  }
}
</code></pre><p>假设我们像上面一样定义了两个模块 <code>M</code> 和 <code>N</code>：</p><ul><li>模块 <code>N</code> 依赖模块 <code>M</code> ，因为模块 <code>N</code> 有 <code>use 0x2::M</code></li><li>但是，同时，模块<code>M</code>引用了<code>N</code>，因为模块<code>M</code>指定了 <code>friend 0x2::N</code></li></ul><p>现在我们考虑一下应该如何在链上升级他们</p><ul><li>目前使用每次发布一个模块的模式：<ul><li>很明显模块<code>M</code>必须第一个发布。先发布模块<code>N</code>会导致<code>N::bar()</code>失败，而先发布模块<code>M</code>应该没有影响，因为没有人可以调用<code>M::foo()</code>。</li><li>但是，当发布<code>M</code>，字节码验证器会检查可见性约束，检查到它指向一个不存在的函数<code>N::bar()</code>。字节码验证器不会解决这个函数句柄，它必须容忍前向声明的可见性约束。</li><li>上述过程的问题在于发布模块<code>N</code>时可能出现竞争风险。假设 Alice 和 Eve 都可以发布到<code>0x2</code>。当<code>M</code>发布时，Alice 和 Eve 都看到<code>M</code>声明<code>N</code>为友元。 Eve可能会抢在Alice前发布模块<code>N</code>，并使用错误的<code>bar()</code>函数，以利用模块<code>M</code>的开发者对 Alice 的信任。</li><li>解决这个问题，需要更安全、更复杂的模块发布流程，流程仍然使用每次发布一个模块。上面的例子，总共需要三个步骤：<ul><li>发布一个空的占位模块<code>N</code></li><li>发布模块<code>M</code></li><li>发布更新模块<code>N</code>使用友元模块<code>M</code></li></ul></li></ul></li><li>未来的多签多模块发布模型：<ul><li>避免复杂的模块发布流程的另一种解决方案是使用多签 + 多模块发布模型，该模型允许以原子方式发布/更新一组模块，即便这些模块驻留在不同的用户帐户中。在上面的例子中，如果我们可以在一个交易中原子地发布<code>M</code>和<code>N</code>，就没有竞争的风险了，也就不需要三步模块发布流程。</li></ul></li></ul><h3 id=其他共享可见性方案>其他“共享”可见性方案</h3><ul><li>address可见性<ul><li>Java 使用“pacakge”的概念，映射到给定位置(命名空间)，可以简单的将它当成地址(发布模块的地址)。 Move中的address可以充当 Java 中“pacakge”的角色。使用这种方法，我们可以做一些类似 <code>public(address)</code>的事——或者只是<code>internal</code>——这将允许跨模块的可见性，但只能在同一个地址下。这个地址的所有者能控制所有发布到这个地址的代码。通过地址可见性很容易实现验证者的强制要求。也就是说，链接时的目标函数必须在相同地址发布的模块中。</li><li>这个模型的问题在于，我们没办法控制后续发布到哪个地址，这可能违背Move的设计原则，即发布时所有绑定都是确定的，并且不能更改。如果在相同地址下的某个发布，允许其他人访问这个地址下的其他模块的内部状态，那么，可能导致其他人可以读取甚至更改那些模块里的私有的状态。</li></ul></li><li>package可见性<ul><li>这是.NET CLR模型里的“internal”可见性的，即，由于编译在一起，它们能相互访问其内部状态。在Move中， “compiled together”实际上是指一起发布，一个发布包将包含所有更新(并且按模块发布交易)，那么必须使用模块列表，而不是单个模块。这使验证者能够控制跨模块的调用。也就是说，如果所有模块在同一个发布单元(包)中，则可以通过内部可见性实现跨模块调用。</li><li>然而，如果没有一些额外的信息来标识包中的模块，这种方案导致在发布后(例如加载)无法验证可见性/可访问性。 VM 只能认为所有内部访问都是正确的，因为在发布之后，没法进行验证。</li><li>如果某个版本，在保留可见性许可的情况下，去掉一些模块，版本管理或升级可能会有问题。是不是有问题需要进一步的分析。问题的本质在于发布的时候进行验证是否足以保证正确性。可能会有人说，VM 知道上下游的模块包，可以构建相应的依赖关系图，并且在检测到权限不一致的时候报告错误。</li><li>或者，这些模块可以一起声明这个“包”属于哪。二进制格式有一个将这些模块一起发布的东西，并且在检查内部可见性/可访问性时定义包含的范围。整个包仍将一起发布，但是，之后字节码验证器在验证内部访问的时候，明确知道有哪些模块需要考虑。</li><li>选择的模块friend可见性的方案，比package可见性方案有更细粒度的访问控制。并且，由于 Move 还没有多模块包的概念，friend可见性是更好的选择。</li></ul></li></ul><h1 id=script可见性>Script可见性</h1><ul><li>状态: Move 1.2已实现</li></ul><h2 id=说明-1>说明</h2><p>脚本可见性是Move 1.2的一个新特性，允许模块函数像脚本一样，被安全直接地调用。原来函数只有public和private两种可见性，public的函数可以被任意调用，但是private的函数只能在被定义的模块中使用。一个script可见性的函数可以像脚本一样被直接调用，但是只能在脚本或者其他script可见性的函数中调用。</p><h2 id=动机-2>动机</h2><h3 id=管理基于hash的许可名单>管理基于hash的许可名单</h3><p>在Diem框架中，有一个基于hash的有效脚本的名单，允许的脚本才能在网络上广播。如果脚本的hash在名单中，这个脚本才能被执行，否则，交易会被拒绝。
这个解决方案是有效的，但是带来了麻烦，尤其是一些类似新的Move字节码版本导致所有的hash都变了的情况。 在升级方案中，许可名单应该在同一个write-set交易中被升级。虽然这个升级方案可行，但是不能很好的扩展。在可能的情况下，Diem要继续支持旧的交易，以简化客户端的升级过程，允许很少更新的预签名交易(例如，紧急密钥更新)。许可名单将包括所有前面发布的旧的hash，它可能快速增长并且很难管理。Script可见性通过把允许的脚本作为Diem框架的一部分的方案，代替跟踪他们的hash的方案，很好的解决了这个问题。</p><h3 id=diem框架更新>Diem框架更新</h3><p>在未来的某个时刻，当Diem允许通过随便脚本函数进行交易，Diem框架的public接口将非常难更新，但就目前而言，通过与脚本不兼容的关键更改，来从旧的版本更新框架仍然很重要。这与继续支持旧版本交易的想法冲突。通过script可见性，支持的脚本可以跟框架一起更新，因为这些脚本的Move字节码不包含在交易中，而是作为框架的一部分存储在链上。</p><h3 id=无意义的包装>无意义的包装</h3><p>我们简单包装的许多脚本实际上只调用了1-2个函数。这些脚本不包含任何有意思的临时计算(并且不能在有许可列表的Diem框架中这么做)。如果模块编写者可以为某些函数自动生成脚本，或者简单地标记哪些函数可以直接调用，就好像它们是脚本一样，将非常方便。</p><h2 id=描述-2>描述</h2><p><code>script</code>可见性解决了这些问题。在Move旧的版本中，模块中的函数只能被声明为<code>Public</code> 或者 <code>Private</code>(Move二进制文件格式中的<code>Public</code> 或者 <code>Private</code>)。通过这些更新，现在可能的可见性是： private (没有修饰符), <code>public(friend)</code>, <code>public(script)</code>, 和 <code>public</code>。分别对应文件格式中的Private、Friend、Script、Public。(更详细的信息查看这个Friend可见性更新描述。)</p><p>一个<code>public(script)</code>函数只能这么调用1) 其他<code>public(script)</code>函数, 或者 2) 交易脚本。并且，如果函数具有满足脚本函数必要限制的签名，则它能像脚本那样被Move VM直接调用。</p><h3 id=新的可见性修饰符>新的可见性修饰符</h3><p><code>public(script)</code>是一个能被应用在任何模块函数的、新的可见性修饰符。一个<code>public(script)</code>函数能被任何其他<code>public(script)</code>函数(不管在不在相同模块)或者另一个脚本函数调用。除了这个可见性规则之外，<code>public(script)</code>函数像其他任何模块函数一样有相同的规则，意味着它们能被private函数调用，创建新的结构体实例，访问全局存储(通过该模块中声明的类型)，等等。</p><p>不像脚本函数，<code>public(script)</code>函数的签名不受限制。任何对另一个模块函数有效的签名都是有效的<code>public(script)</code>签名。但是，要让Move VM像脚本一样调用，<code>public(script)</code>函数必须与脚本函数有相同的限制。换句话说，虽然每个脚本函数都有一个受限制的签名，但对<code>public(script)</code>函数的限制会在执行入口点时会动态检查。</p><h3 id=new-vm-entry-point新的vm入口>New VM Entry Point新的VM入口</h3><p>VM添加了新的<code>execute_script_function</code>入口，允许public(script)`函数在已发布的模块中调用。入口的签名如下：</p><pre><code>fn execute_script_function(
    &amp;self,
    module: &amp;ModuleId,
    function_name: &amp;IdentStr,
    ty_args: Vec&lt;TypeTag&gt;,
    args: Vec&lt;Vec&lt;u8&gt;&gt;,
    senders: Vec&lt;AccountAddress&gt;,
    data_store: &amp;mut impl DataStore,
    cost_strategy: &amp;mut CostStrategy,
    log_context: &amp;impl LogContext,
) -&gt; VMResult&lt;()&gt;
</code></pre><p>入口设计得像已经存在的<code>execute_script</code>，唯一的不同：</p><ul><li>参数<code>script: Vec&lt;u8></code>(例如，一个原始二进制的序列化脚本)被<code>module: &ModuleId</code> 和 <code>function_name: &IdentStr</code> 对代替，唯一标识一个已发布的模块中的<code>public(script)</code> 函数(假设函数已经存在)。</li></ul><p>在以下这些情况中，VM 会拒绝执行并返回正确的状态码：</p><ul><li>这个 <code>module</code> 或者 <code>function_name</code> 不存在</li><li>函数不是 <code>public(script)</code> 函数</li><li><code>public(script)</code> 函数签名没有通过脚本签名检查：</li><li>所有 <code>signer</code> 参数必须在非<code>signer</code>前面</li><li>函数不返回任何值</li><li>函数类型参数中任何非<code>signer</code>类型不能通过脚本签名检查：<ul><li>表面上，类型有<code>copy</code>的ability，并且不是一个结构体</li></ul></li><li>函数类型变量中的每个类型都是封闭的，例如，不能指向其他类型变量</li><li><code>senders</code>, <code>args</code>, 或者 <code>ty_args</code>不满足函数签名定义</li></ul><h2 id=例子>例子</h2><p>当你需要用一个脚本，包装一个模块中的一个函数，这个特性非常好用：</p><pre><code>script {
    fun call_foo(account: signer, amount: u64) {
        0x42::M::foo(account, amount)
    }
}
</code></pre><p>将模块函数从 <code>public</code> 改成 <code>public(script)</code> ，可以删除简单包装的脚本：</p><pre><code>address 0x42 {
module M {
    ...
    // Replace previous &quot;public&quot; visibility...
    public(script) fun foo(account: signer, amount: u64) {
        ...
    }
}
}
</code></pre><p>然而，要记住，这个函数现在只能在其他的 <code>public(script)</code> 函数或者脚本函数中被调用。</p><pre><code>address 0x43 {
module Other {
    fun private_call_foo(account: signer, amount: u64) {
        0x42::M::foo(account, amount) // ERROR Now invalid
    }

    public fun public_call_foo(account: signer, amount: u64) {
        0x42::M::foo(account, amount) // ERROR Now invalid
    }

    public(script) fun script_call_foo(account: signer, amount: u64) {
        0x42::M::foo(account, amount) // Still a valid call
    }
}
}

script {
    fun still_valid(account: signer) {
        0x42::M::foo(account, 0) // Still a valid call
    }
}
</code></pre><h2 id=其他考虑-2>其他考虑</h2><p>我们没有找到其他方案可以解决基于hash的许可名单引起的脚本版本控制的问题。将交易脚本转换为与对应模块一起发布和更改的<code>public(script)</code> 函数是最直接的解决方案。</p><p>针对无意义包装这个问题，我们考虑通过编译器自动生成脚本。这样会比较简单，但是在有<code>public(script)</code> 函数的情况下是不必要的。</p></article></div></div></div></div><div class="footer visible-lg"><div class=container><div class="row hr"><div class="col-md-4 item">联系我们</div><div class="col-md-4 item">技术</div><div class="col-md-4 item">社区</div></div><div class="row td"><div class="col-md-4 item">微信公众号: Starcoin区块链</div><div class="col-md-4 item"><a target=_blank href="https://chrome.google.com/webstore/detail/starmask/mfhbebgoclkghebffdldpobeajmbecfk?hl=zh-CN">StarMask 插件钱包</a></div><div class="col-md-4 item"><a target=_blank href=https://starcoin.org/zh/news/>新闻</a></div></div><div class="row td"><div class="col-md-4 item">推特: <a target=_blank href=https://twitter.com/starcoinstc>StarcoinSTC</a></div><div class="col-md-4 item"><a target=_blank href=https://explorer.starcoin.org>区块浏览器</a></div><div class="col-md-4 item"><a target=_blank href=https://westar.io>Westar 实验室</a></div></div><div class="row td"><div class="col-md-4 item">微信群请加: starcoinorg</div><div class="col-md-4 item"><a target=_blank href=https://starcoin.org/zh/developer/>开发者文档</a></div><div class="col-md-4 item"><a target=_blank href=https://www.movelang.io>Move 中文社区</a></div></div><div class="row td"><div class="col-md-4 item">Discord 群: <a target=_blank href=https://discord.gg/96tKt5exaE>Starcoin Spaceship</a></div><div class="col-md-4 item"><a target=_blank href=https://starcoin.org/zh/developer/sdk/>SDK</a></div><div class="col-md-4 item"><a target=_blank href=https://github.com/starcoinorg/starcoin/discussions>GitHub 讨论区</a></div></div><div class=foot><div class=copyright>© 2018-2021 Starcoin.org 保留一切权利。</div></div></div></div><div class="m-footer visible-xs visible-sm visible-md"><div class=container><div class=go-contact-us>联系我们<img src=/img/r-arrow.png></div><div class=row-li><div class=item>微信公众号: Starcoin区块链</div><div class=item>微信群请加: starcoinorg</div></div><div class=row-li><div class=item>推特: <a target=_blank href=https://twitter.com/starcoinstc>StarcoinSTC</a></div><div class=item>Discord 群: <a target=_blank href=https://discord.gg/96tKt5exaE>Starcoin Spaceship</a></div></div><div class=go-contact-us>技术<img src=/img/r-arrow.png></div><div class=row-li><div class=item><a target=_blank href="https://chrome.google.com/webstore/detail/starmask/mfhbebgoclkghebffdldpobeajmbecfk?hl=zh-CN">StarMask 插件钱包</a></div><div class=item><a target=_blank href=https://explorer.starcoin.org>区块浏览器</a></div></div><div class=row-li><div class=item><a target=_blank href=https://starcoin.org/zh/developer/>开发者文档</a></div><div class=item><a target=_blank href=https://starcoin.org/zh/developer/sdk/>SDK</a></div></div><div class=go-contact-us>社区<img src=/img/r-arrow.png></div><div class=row-li><div class=item><a target=_blank href=https://starcoin.org/zh/news/>新闻</a></div><div class=item><a target=_blank href=https://westar.io>Westar 实验室</a></div></div><div class=row-li><div class=item><a target=_blank href=https://www.movelang.io>Move 中文社区</a></div><div class=item><a target=_blank href=https://github.com/starcoinorg/starcoin/discussions>GitHub 讨论区</a></div></div><div class=crt>© 2018-2021 Starcoin.org 保留一切权利。</div></div></div></body></html>